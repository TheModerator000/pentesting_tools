beginning(){
clear
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Routine checks!
scriptname="TraceTool v2.1"
foldercheck
scriptdisplay
# show_startmenus
# read_startoptions
servicemenu
}
USERLOGGEDIN=$HOME
#full_Parse Variables
SCRIPTSDIR=$USERLOGGEDIN/Desktop/Scripts



infosetup(){
clear
beginning
}

infosetupNEW(){
clear
scriptdisplay
echo
echo
echo What is the client\s name?
read varname
clear
echo $scriptname
echo
echo
echo
echo
mkdir "$USERLOGGEDIN/Desktop/Projects/$varname/"
projectdir="$USERLOGGEDIN/Desktop/Projects/$varname"
clear
pripsone
clientdomain
mainmenu
}

chromecheck(){
clear
scriptdisplay
echo
echo
echo Checking for Chrome Installation?
FILE=/tmp/google-chrome-stable_current_amd64.deb
if [ -f "$FILE" ]; then
    sudo apt install /tmp/google-chrome-stable_current_amd64.deb -y
else 
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -P /tmp
	sudo apt install /tmp/google-chrome-stable_current_amd64.deb -y
fi
echo
}

prereqs(){
clear
scriptdisplay
echo
echo
sudo apt-get update -y
sudo apt install python3-pip prips -y
echo
}

installSoftware(){
clear
echo
prereqs
impacketinstall
mitm6install
kerbruteinstall
chromecheck
show_menus
read_options
echo
}

impacketinstall(){
clear
scriptdisplay
echo
echo
echo Checking for Impacket Installation?
git clone https://github.com/SecureAuthCorp/impacket.git /tmp/impacket
python3 -m pip install /tmp/impacket/.
echo
}

kerbruteinstall(){
clear
scriptdisplay
echo
echo
echo Checking for Kerbrute Installation?
wget https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_linux_amd64 $USERLOGGEDIN/Desktop/Scripts
chmod +x $USERLOGGEDIN/Desktop/Scripts/kerbrute_linux_amd64
echo
}

mitm6install(){
clear
scriptdisplay
echo
echo
echo Checking for mitm6 Installation?
python3 -m pip install mitm6
echo
}


#!/bin/bash
# A menu driven shell script sample template 
## ----------------------------------
# Step #1: Define variables
# ----------------------------------
EDITOR=vim
PASSWD=/etc/passwd
RED='\033[0;41;30m'
STD='\033[0;0;39m'
 
# ----------------------------------
# Step #2: User defined function
# ----------------------------------
pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}

# project folder check
foldercheck(){
if [ ! -d "$USERLOGGEDIN/Desktop/Projects" ]; then
mkdir $USERLOGGEDIN/Desktop/Projects
fi
if [ ! -d "$USERLOGGEDIN/Desktop/Scripts" ]; then
mkdir $USERLOGGEDIN/Desktop/Scripts
fi
}

# info gathering
one(){
	clear
	scriptdisplayclient
	echo
	mkdir $projectdir/infogathering
	echo
	echo "Whois attempt on $domainname"
	whois $domainname > $projectdir/infogathering/whois.txt
	echo
	echo "The Harvester scan on $domainname"
	theHarvester -d $domainname -b google,bing,linkedin,twitter > $projectdir/infogathering/harvest.txt
	echo
	echo "DNSEnum on $domainname"
	dnsenum $domainname > $projectdir/infogathering/dnsenum.txt
	echo
	echo "NSLookup on $domainname"
	nslookup $domainname > $projectdir/infogathering/nslookup.txt
 	echo
	echo "Metagoofill on $domainname"
	metagoofil -d $domainname -t doc,pdf,xls,csv,txt -l 200 -n 50 -o metagoofiles -f $projectdir/infogathering/metagoo.html
	echo
	echo "DNSRecon on $domainname"
	dnsrecon -d $domainname > $projectdir/infogathering/dnsrecon.txt
	echo
	echo "Sublist3r on $domainname"
	sublist3r --domain $domainname > $projectdir/infogathering/sublister.txt
	echo
	echo "WAFWOOF on $domainname"
	wafw00f http://$domainname > $projectdir/infogathering/wafw00f.txt
	echo
	echo "Wordpress Scanner $domainname"
	python $USERLOGGEDIN/Desktop/EPT-Tools/wpscanner.py -s http://$domainname -n 20 > $projectdir/infogathering/wpscanner.txt
        pause
		mainmenu
}

# client domain name
clientdomain(){
clear
echo What is the client\s domain name?
tput setaf 1; echo tracesecurity.com
echo
tput setaf 7
read domainname
echo $domainname > $projectdir/domainname.txt
mainmenu
}

#header display for pages
scriptdisplay(){
echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
echo " $scriptname"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
}

#header display for pages with client name
scriptdisplayclient(){
echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
echo " $scriptname"
echo " $varname"
echo " $domainname"
echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
}

# nmap
nmapshort(){
	clear
	scriptdisplayclient
	echo
	echo "Nmap Host Scan"
	sudo nmap -iL $projectdir/ip.txt -sn -oG - | awk '/Up/{print $2}' > $projectdir/hosts
	echo
	echo "Nmap TCP Scan"
	sudo nmap -sSV --top-ports 500 -Pn -oG $projectdir/nmapTCP.txt -iL $projectdir/ip.txt
    echo
	awk '/ 80\/open/{print "http://" $2 "/"}' < $projectdir/nmapTCP.txt >> $projectdir/http-urls.txt
	awk '/ 443\/open/{print "https://" $2 "/"}' < $projectdir/nmapTCP.txt >> $projectdir/https-urls.txt
	echo
	echo "Nmap ICMP Scan"
	sudo nmap -sn -PE -iL $projectdir/ip.txt -oN $projectdir/pingtest.txt 
	echo
	echo "Nmap UDP Scan"
	sudo nmap -sUV --top-ports 500 -Pn -oG $projectdir/nmapUDP.txt -iL $projectdir/ip.txt
	echo
	awk '/ 500\/open/{print $2}' < $projectdir/nmapUDP.txt >> $projectdir/ike-hosts.txt
		pause
		mainmenu
}

# prips
pripsone(){
scriptdisplayclient
echo
echo
echo
echo
echo What is the IP address range you would like to scan? 
tput setaf 1; echo ex:192.168.0.0 192.168.0.254 or 192.168.0.0/24; echo You will have the opportunity to add more ranges next.; echo "If it is easier to copy and paste the IP addresses, enter whatever you would like and get to the main menu. The ip.txt file will be in the Projects>ClientName folder."
tput setaf 7
read iprange
prips $iprange > $projectdir/ip.txt
clear
pripsmenu
}

# ike aggressive mode scans
ikeaggressive(){
scriptdisplayclient
echo
echo
echo
echo
echo Performing an IKE Scan to attempt to retrieve a handshake
ike-scan -A -M -n bob --file $projectdir/ike-hosts.txt > $projectdir/ikeOUTPUT
TEST
clear
portmenu
}

# prips
pripstwo(){
clear
scriptdisplayclient
echo
echo
echo
echo
echo What is the IP address range you would like to scan? 
tput setaf 1; echo ex:192.168.0.0 192.168.0.254 ***even if single IP address!; echo You will have the opportunity to add more ranges next.; echo "If it is easier to copy and paste the IP addresses, enter whatever you would like and get to the main menu. The ip.txt file will be in the Projects>ClientName folder."
tput setaf 7
read iprange
prips $iprange >> $projectdir/ip.txt
clear
pripsmenu
}

# Aquatone Scans
eyewitnessscan(){
clear
scriptdisplayclient
echo
echo
echo
echo
echo Aquatone will began on HTTP Hosts..... 
aquatone $projectdir/http-urls.txt
echo
echo
echo Aquatone will began on HTTPS Hosts....
aquatone $projectdir/https-urls.txt
clear
portmenu
}

# nmap long
nmaplong(){
	clear
	scriptdisplayclient
	echo
	echo How many top ports would you like to scan?
	read topports
	clear
	echo
	echo
	echo
	#echo "Nmap Host Scan"
	#nmap -iL $projectdir/ip.txt -sn -oG - | awk '/Up/{print $2}' > $projectdir/hosts
	#echo
	echo "Nmap TCP Scan"
	sudo nmap -sSV --top-ports 4000 -Pn -oG $projectdir/nmapTCP.txt -iL $projectdir/ip.txt
    echo
	awk '/ 80\/open/{print "http://" $2 "/"}' < $projectdir/nmapTCP.txt >> $projectdir/http-urls.txt
	awk '/ 443\/open/{print "https://" $2 "/"}' < $projectdir/nmapTCP.txt >> $projectdir/https-urls.txt
	echo
	echo "Nmap ICMP Scan"
	sudo nmap -sn -PE -iL $projectdir/ip.txt -oN $projectdir/pingtest.txt 
	echo
	echo
	echo "Nmap UDP Scan"
	sudo nmap -sU -p 53,123,161,500,623 -Pn -oG $projectdir/nmapUDP.txt -iL $projectdir/ip.txt
	echo
	awk '/ 500\/open/{print $2}' < $projectdir/nmapUDP.txt >> $projectdir/ike-hosts.txt
		pause
		mainmenu
}

# nmap custom
nmapcustom(){
	clear
	scriptdisplayclient
	echo
	echo How many top ports would you like to scan?
	read topports
	clear
	echo
	echo
	echo
	#echo "Nmap Host Scan"
	#nmap -iL $projectdir/ip.txt -sn -oG - | awk '/Up/{print $2}' > $projectdir/hosts
	#echo
	echo "Nmap TCP Scan"
	sudo nmap -sSV --top-ports $topports -Pn -oG $projectdir/nmapTCP.txt -iL $projectdir/ip.txt
    echo
	awk '/ 80\/open/{print "http://" $2 "/"}' < $projectdir/nmapTCP.txt >> $projectdir/http-urls.txt
	awk '/ 443\/open/{print "https://" $2 "/"}' < $projectdir/nmapTCP.txt >> $projectdir/https-urls.txt
	echo
	echo "Nmap ICMP Scan"
	sudo nmap -sn -PE -iL $projectdir/ip.txt -oN $projectdir/pingtest.txt 
	echo
	echo
	echo "Nmap UDP Scan"
	sudo nmap -sU --top-ports $topports -Pn -oG $projectdir/nmapUDP.txt -iL $projectdir/ip.txt
	echo
	awk '/ 500\/open/{print $2}' < $projectdir/nmapUDP.txt >> $projectdir/ike-hosts.txt
		pause
		mainmenu
}



# sslscan
sslscan(){
	clear
	scriptdisplayclient
	echo
	echo
	echo "SSL Certificate Scan"
	for i in $(cat $projectdir/https-urls.txt); do echo $i; sslscan --no-failed $i; done > $projectdir/SSLScanResults.txt
	echo
	
		pause
		portmenu
}

# IPT Scan
iptscan(){
	clear
	scriptdisplayclient
	echo
	echo
	echo NMAP will now scan for active hosts and then scan those hosts for open ports.
	echo $Green FTP, Telnet, SSH, Web, SMB, SNMP, Database, Domain Controller, and VNC hosts will be identified into according txt files $White
	echo $Red If you have the ip addresses lined out in the ip.txt, continue.... $White
	pause
	echo
	mkdir /home/traceadmin/IPT/
	echo "Scanning for active hosts"
	# nmap -iL $projectdir/ip.txt -sn -oG - | awk '/Up/{print $2}' > $projectdir/hosts
	sudo nmap -iL /home/traceadmin/IPT/ip.txt -sn -oG - | awk '/Up/{print $2}' > /home/traceadmin/IPT/hosts
	echo
	livehostscount
	echo
	echo "Found $liveHosts live hosts!"
	sudo nmap -sSU -iL /home/traceadmin/IPT/hosts -Pn -n -p U:53,111,123,161,162,623,500,T:20-23,25,53,67-68,69,79-80,81,88,110-111,113,135,137-139,143,179,264,300,389,443-445,465,513-514,541,546-547,554,587,591,593,636,832,873,902,981,993,995,1003,1010,1025-1029,1311,1433,1720,1723,1755,2000,2042,2049,2082,2083,2086,2087,2095,2096,2097,2480,2483-2484,2967,3000,3128,3306,3333,3389,3400,3689,4097,4243,4567,4711,4712,4993,5000,5009,5050,5060,5061,5104,5108,5190,5432,5500,5631,5632,5666,5800,5900,5901,5985,5986,6000,6001,6543,7000,7396,7474,8000,8001,8008-8010,8014,8042,8069,8080-8081,8088,8090,8091,8118,8123,8172,8222,8243,8280,8281,8333,8443,8500,8834,8880,8983,9000,9043,9060,9080,9090,9091,9100,9200,9443,9981,12443,16080,18091,18092,20720,28017 --open --reason -oA /home/traceadmin/IPT/nmapscan	
	echo "Magical scans completed!"
	echo "Would you like to push these scans back to your Kali for parsing?"
	# echo "Parsing scans into folders!"
	# bash $USERLOGGEDIN/Desktop/Scripts/full_parse $projectdir/nmapscan.gnmap --out-dir $projectdir/scan_results/
	# echo "Parsing complete! Metasploit incoming!"
	# (cd $projectdir/scan_results && msfconsole -r $USERLOGGEDIN/Desktop/Scripts/Pac-Manv1.7.rc)
	echo "Be sure to use the menu option on your KALI box to parse everything and hit the metasploit modules"
	echo "Everything is done!"
		pause
		servicemenu
}

tracetoolpush(){
	clear
	echo 
	echo
	echo Press enter if you are connecting to the scanner, and can ping 19.1.1.2. 
	echo If not, hit ctrl+c and get CONNECTED!
	echo
	echo You will be prompted for a password. 
	echo This is the one you created for the scanner when enabling remote access in CSO
	echo
	pause
	echo
	sudo scp /trace-source/scannerTools.tar.gz /trace-source/TraceTool-v2.sh traceadmin@19.1.1.2:/home/traceadmin/
	# scp -r /trace-source/* tsadmin@172.24.44.171:/home/tsadmin/
	echo
	echo If you saw a bunch of stuff, it worked
	pause
	iptmenu
}

scannerInstall(){
	clear
	echo
	scriptdisplay
	echo
	clear
	echo "Installing pentest requirements!"
	cd /home/traceadmin/
	tar -xvf scannerTools.tar.gz
	sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev wget libbz2-dev -y
	sudo tar -xvf Python-3.7.0.tar.xz
	cd /home/traceadmin/Python-3.7.0/
	sudo ./configure --enable-optimizations
	sudo make altinstall
	echo
	echo
	echo
	echo "Installing scanner dependencies!"
	sudo apt-get install git -y
	sudo apt-get install python3 -y
	sudo apt-get install python3-pip -y
	sudo apt-get install proxychains -y
	echo
	echo
	echo
	echo "Updating PIP and other stuff"
	sudo pip3.7 install --upgrade pip
	sudo pip3.7 install netifaces
	sudo pip3.7 install twisted
	sudo pip3.7 install scapy
	sudo pip3.7 install impacket
	echo
	echo 
	echo 
	echo "Installing impacket"
	cd /home/traceadmin/impacket
	sudo python3.7 setup.py install
	echo
	echo 
	echo
	echo  "Installing mitm6"
	cd /home/traceadmin/mitm6
	sudo python3.7 setup.py install
	echo
	echo
	echo
	echo  "The MAGIC IS COMPLETE!" 
	pause
	iptmenu
}

# Exising search of projects
existingsearch(){
	clear
	scriptdisplay
	echo
	cd $USERLOGGEDIN/Desktop/Projects/
	for f in *; do
		if [ -d ${f} ]; then
			echo $f
		fi
	done
	echo
	echo "Please enter the exact name of the existing project from above:"
	read varname
	projectdir="$USERLOGGEDIN/Desktop/Projects/$varname"
	domainname="$(cat $projectdir/domainname.txt)"
	echo
	clear
		pause
		mainmenu
}

livehostscount(){
	liveHosts="$( wc -l < $projectdir/hosts)"
}
ipaddresscount(){
	ipcount="$( wc -l < $projectdir/ip.txt)"
}

displaynmap(){
	clear
	scriptdisplayclient
	sudo python2 /usr/local/bin/parser.py $projectdir/nmapTCP.txt
	sudo python2 /usr/local/bin/parser.py $projectdir/nmapUDP.txt
	echo
	echo Displaying DNS Enumeration Results next
	pause
	cat $projectdir/dnsenum.txt
	echo
	echo Displaying Whois Results next
	pause
	cat $projectdir/whois.txt
	echo
	echo Displaying ICMP Echo Results next
	pause
	cat $projectdir/pingtest.txt
	echo
	echo Displaying TheHarvester Results next
	pause
	cat $projectdir/harvest.txt
	mainmenu
}

nmapcheck(){
	if [ -e $projectdir/nmapTCP.txt ]
	then
		tcpcheck="COMPLETE"
	else
		tcpcheck="NOT COMPLETE"
	fi
	if [ -e $projectdir/nmapUDP.txt ]
	then
		udpcheck="COMPLETE"
	else
		udpcheck="NOT COMPLETE"
	fi
	
}

openiptxt(){
	clear
	echo
	scriptdisplay
	echo
	echo Opening IP.txt file from project directory
	nano $projectdir/ip.txt
	echo Heading back to the menu
	pause
	iptmenu
}

updatescript(){
clear
echo Cleaning temp files
sudo rm -r /tmp/TraceTool
sudo mkdir /tmp/TraceTool
echo
echo Pulling latest version from Gitlab
sudo git clone git@ts-gitlab.corp.tracesecurity.com:root/tracetool.git /tmp/TraceTool 
echo
# echo Latest version pulled!
# echo Copying to local bin and making executable
# sudo cp /tmp/TraceTool/TraceTool-v2.sh /usr/local/bin/
# sudo cp /tmp/TraceTool/TraceTool-v2.sh /trace-source/
# sudo chmod +x /usr/local/bin/TraceTool-v2.sh
# echo
# echo
# echo TraceTool is updated
# pause
# servicemenu
sudo chmod +x /tmp/TraceTool/update.sh
echo Press enter to complete the update process
pause
exec /tmp/TraceTool/update.sh
}



#EPT selection
eptselection(){
startmenu

}

# IPT selection
iptselection(){
iptmenu
}
 
# main menu
mainmenu(){
	show_menus
	read_options
}

# nmap menu
nmapmenu(){
	show_nmapmenus
	read_nmapoptions
}

# port menu
portmenu(){
	show_portmenus
	read_portoptions
}

# prips menu
pripsmenu(){
	show_pripsmenus
	read_pripsoptions
}

# service menu
servicemenu(){
	show_servicemenus
	read_serviceoptions
	}
	
	# service menu
startmenu(){
	show_startmenus
	read_startoptions
	}
	
# IPT menu
iptmenu(){
	show_iptmenus
	read_iptoptions
	}

 
# function to display menus
show_menus() {
	clear
	ipaddresscount
	nmapcheck
	echo " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo "               $scriptname           "           
	echo "          Client Name: $varname      "
	echo "          Domain Name: $domainname   "
	echo "          IP Addresses: $ipcount     "
	echo "          NMAP TCP: $tcpcheck        "
	echo "          NMAP UDP: $udpcheck        "
	echo " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo " 1. Reconfigure Client"
	echo " 2. Information Gathering - $Green theharvester, whois, dnsenum, hunterio, connectdata.com $White"
	echo " 3. NMap Scan - $Green 1-hour and 8-hour EPT $White"
	echo " 4. Testing Tools - $Red UNDER DEVELOPMENT $White"
	echo " 5. Display NMAP & Info Gathering Results"
	echo " 6. Exit"
}
# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_options(){
	local choice
	read -p " Enter choice [ 1 - 6] " choice
	case $choice in
		1) infosetup ;;
		2) one ;;
		3) nmapmenu ;;
		4) portmenu ;;
		5) displaynmap ;;
		6) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

# function to display menus
show_servicemenus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " $scriptname"
	echo " $varname"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. EPT"
	echo "2. IPT"
	echo "3. Update Script"
	echo "4. Exit"
}


# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_serviceoptions(){
	local choice
	read -p "Enter choice [ 1 - 4] " choice
	case $choice in
		1) eptselection ;;
		2) iptselection ;;
		3) updatescript ;;
		4) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

# function to display menus
show_startmenus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " $scriptname"
	echo " $varname"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Existing Project"
	echo "2. New Project"
	echo "3. Exit"
}


# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_startoptions(){
	local choice
	read -p "Enter choice [ 1 - 3] " choice
	case $choice in
		1) existingsearch ;;
		2) infosetupNEW ;;
		3) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

# function to display menus
show_iptmenus() {
	clear
	ipaddresscount
	echo " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo "               $scriptname           "           
	echo "          Client Name: $varname      "
	echo "          Domain Name: $domainname   "
	echo "          IP Addresses: $ipcount     "
	echo " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Perform Scans"
	echo "2. Port Tools"
	echo "3. Push TraceTool to Scanner"
	echo "4. For the scanner: Install Tools"
	echo "5. Exit"
}
# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_iptoptions(){
	local choice
	read -p "Enter choice [ 1 - 5] " choice
	case $choice in
		1) iptscan ;;
		2) portmenu ;;
		3) tracetoolpush ;;
		4) scannerInstall ;;
		5) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}



# function to display menus
show_nmapmenus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " $scriptname"
	echo " $varname"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. 1 Hour EPT - $Green Scans the top 4000 ports $White"
	echo "2. 8 Hour EPT - $Green Scans all of the ports $White"
	echo "3. Custom Top Ports - $Green If you would like to enter a custom amount $White"
	echo "4. Back to Main Menu"
	echo "5. Exit"
}
# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_nmapoptions(){
	local choice
	read -p "Enter choice [ 1 - 4] " choice
	case $choice in
		1) nmapshort ;;
		2) nmaplong ;;
		3) nmapcustom ;;
		4) mainmenu ;;
		5) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}


# function to display menus
show_portmenus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " $scriptname"
	echo " $varname"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. 443 - $Green SSL Scans $White"
	echo "2. 80 - $Green Aquatone HTTP/HTTPS Scans $White"
	echo "3. 500 - $Green IKE Aggressive Mode Scan $White"
	echo "4. Back to Main Menu"
	echo "5. Exit"
}
# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_portoptions(){
	local choice
	read -p "Enter choice [ 1 - 5] " choice
	case $choice in
		1) sslscan ;;
		2) eyewitnessscan ;;
		3) ikeaggressive ;;
		4) mainmenu ;;
		5) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}

# function to display menus
show_pripsmenus() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " Would you like to add another IP range?"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Yes"
	echo "2. No"

}
# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_pripsoptions(){
	local choice
	read -p "Enter choice [ 1 - 2] " choice
	case $choice in
		1) pripstwo ;;
		2) clientdomain ;;
		*) echo -e "${RED}Error...${STD}" && sleep 2
	esac
}


 
# ----------------------------------------------
# Step #3: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Step #4: Main logic - infinite loop
# ------------------------------------


	infosetup
	show_menus
	read_options