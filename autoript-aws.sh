#!/usr/bin/sudo expect 
#
# It is somewhat painful to set up the PPP tunnel for remote access to
# a client network via its scanner.  We have had various discussion
# about what it might take to get remote access -- this script takes
# care of it in automated fashion.  To make this work, you will need
# to install "expect" (apt-get install expect).  We use expect to
# drive two SSH sessions and set up the PPP tunnel, IP forwarding, NAT
# via iptables, etc., all automatically.
#
# The user still has to do some configuration, such as the routing
# required to perform the assessment or other activities.
# Nevertheless, this should be a significant improvement.
#
# Author:  Josh Stone
# Contact: joshs@tracesecurity.com
# Date:    2011-09-14

# Author:  Ryan Castle
# Contact: ryanc@tracesecurity.com
# Date:    2018-04-25

#

set bastion  "18.216.164.53"

set bastion_prompt ".*ip-10-0-0-135"
set scanner_prompt "tracescanner"

# 
# This just prints out a pretty banner -- yellow, of course
#

proc banner {msg} {
    send_user -- "\n\x1b\[33m\x1b\[1m-------------------------------------------------------------------------\n"
    send_user -- "$msg\n"
    send_user -- "-------------------------------------------------------------------------\x1b\[m\n\n"
}


#
# I found it frustrating that output is not buffered well, so the user
# doesn't get much useful feedback until the script is done.  This
# will allow printing of colorful notifications as various tasks are
# completed.
#

proc notify {msg} {
    send_user -- "\n\x1b\[36m\x1b\[1mNOTE: \x1b\[31m$msg\x1b\[m\n"
}


#
# We prompt the for the user's admin channel
#

proc getadmin {} {
    send_user "\x1b\[33m\x1b\[1mAdmin channel (#)?  \x1b\[m "
    expect_user -re "(.*)\n"
    return $expect_out(1,string)
}

# 
# Prompt for username to login to scanner bastion
#

proc getbastionuser {} {
    send_user "\x1b\[33m\x1b\[1mBastion username?  \x1b\[m "
    expect_user -re "(.*)\n"
    return $expect_out(1,string)
}

#
# Prompt the user for their user password.  We use stty to disable echoing so
# that the password is not displayed when typed.
#

proc getbastionpass {} {
    stty -echo
    send_user "\x1b\[33m\x1b\[1mBastion password?     \x1b\[m "
    expect_user -re "(.*)\n"
    stty echo
    send_user "\n"
    return $expect_out(1,string)
}

#
# Prompt the user for admin password.  We use stty to disable echoing so
# that the password is not displayed when typed.
#

proc getpass {} {
    stty -echo
    send_user "\x1b\[33m\x1b\[1mAdmin password?     \x1b\[m "
    expect_user -re "(.*)\n"
    stty echo
    send_user "\n"
    return $expect_out(1,string)
}


#
# Once the second login session is complete, we need to make some
# settings changes on the scanner.  This function handles setting up
# the second tunnel, iptables, and one end of the PPP tunnel.
#

proc buildtunnel {port} {
    notify "Building second port forward to complete tunnel..."
    send -s "\n\n"
    sleep 5
    send -s "~~"
    sleep 1
    send -s "C -L $port:127.0.0.1:$port\n\n"
    notify "Clearing iptables on scanner..."
    send -s "sudo iptables -F\n"
    send -s "sudo iptables -t nat -F\n"
    sleep 1
    notify "Starting PPP listener on scanner..."
    send -s "rm fifo\n"
    sleep 1
    send -s "mkfifo fifo\n"
    sleep 1
    send -s "sudo sh -c 'pppd nodetach notty noauth < fifo | netcat -l -p $port > fifo&'\n" 
    sleep 1
    notify "Enabling IP forwarding on scanner..."
    send -s "sudo sh -c 'echo -n 1 > /proc/sys/net/ipv4/ip_forward'\n"
    notify "Configuring NAT on PPP tunnel..."
    send -s "sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n"
    send -s "sudo iptables -A FORWARD -i eth0 -o ppp0 -m state --state RELATED,ESTABLISHED -j ACCEPT\n"
    send -s "sudo iptables -A FORWARD -i ppp0 -o eth0 -j ACCEPT\n"
}


#
# From the client side, once the port forwards are set up, we need to
# initiate the PPP tunnel.  This function handles this activity.
#

proc connecttunnel {port} {
    sleep 5
    spawn -ignore SIGHUP pppd noauth passive pty "nc localhost $port" ipparam vpn 19.1.1.1:19.1.1.2
}


#
# When you SSH somewhere new, you need to add the host key to the
# authorized_keys file.  This means you get an optional yes/no prompt,
# so we can't just expect a password prompt.  In some cases, the server
# prompts for the key pass-phrase even if it is not set.  This handles 
# answering SSH's questions in each case.
#

proc doSSH {pass prompt} {
    expect {
	"rsa':" {
	    send "\n"  
	    exp_continue
        } "yes/no" {
            send "yes\n"
            exp_continue
        } refused {
	    notify "ERROR -- scanner connect-back failed"
	    exit
        } password: {
            send -s "$pass\n"
        } Password: {
            send -s "$pass\n"
        }
    }
    expect {
        denied {
            notify "ERROR -- ssh failed, are credentials correct?"
            exit
	} -re $prompt
    }
}



# ----------------------------
# Main script code starts here
# ----------------------------

# A little bit of help text for the user.
banner "Trace Scanner Remote Access Script "
send_user -- "This script will attempt to set up a scanner remote-access tunnel via\n"
send_user -- "two SSH sessions.  The result will be a PPP connection through two SSH\n"
send_user -- "tunnels.  Once complete, you will need to create routes.  Here is an \n"
send_user -- "example (create one per destination client subnet):\n\n"
send_user -- "    route add -net i.j.k.0/24 gw 19.1.1.2\n\n"
send_user -- "In the event that you need to route additional systems through the PPP\n"
send_user -- "tunnel, you will need to add this route on the scanner:\n\n"
send_user -- "    route add -net 192.168.11.0/24 gw 19.1.1.1\n\n"
send_user -- "Be sure to enable IP forwarding if necessary.\n"
send_user -- "\n"
send_user -- "\n"
send_user -- "You will need individual credentials to the scanner bastion host.\n"
send_user -- "Talk to IT if you don't have any.\n"
send_user -- "\x1b\[33m\x1b\[1m-------------------------------------------------------------------------\x1b\[m\n\n"

# Query the user for username and password
set user     [getbastionuser]
set userpw   [getbastionpass]
set admin    [getadmin]
set password [getpass]

if {[regexp {0[0-9]} $admin]} {
    set bastion_admin [string trimleft $admin '0']
} else {
    set bastion_admin $admin
}

set sshport  "22$admin"
set port     "90$admin"

set shell2 "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p $sshport traceadmin@localhost\n"

set send_slow {1 0.01}
set send_human {.1 .3 5 .05 0.8}
set timeout 30

notify "Logging into bastion host $bastion..."
spawn ssh -L $port:127.0.0.1:$port $user@$bastion
doSSH $userpw $bastion_prompt
notify "Connecting to scanner..."
send -s $shell2
notify "Sleeping for 2 seconds before attempting SSH"
sleep 2
doSSH $password $scanner_prompt
buildtunnel $port
sleep 4
notify "Starting PPP client on local system, connecting through tunnel..."
if {[fork]==0} { 
    connecttunnel $port
    sleep 5
    notify "Done -- proceed to hacking."
}
send -s "\n"
interact